# Stage 1: Build stage
FROM python:3.12-bullseye AS builder

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    POETRY_VERSION=1.8.0 \
    POETRY_VIRTUALENVS_IN_PROJECT=1 \
    POETRY_VIRTUALENVS_CREATE=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache 

# Create and set working directory
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y curl build-essential && \
    curl -sSL https://install.python-poetry.org | python3 - && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Add Poetry to PATH
ENV PATH="/app/.venv/bin:/root/.local/bin:$PATH"

# Copy only the necessary files to install dependencies
COPY pyproject.toml poetry.lock .

# Install dependencies without creating a virtual environment
RUN poetry install --no-root --without=dev && \
    rm -rf $POETRY_CACHE_DIR

# RUN poetry config virtualenvs.create false && \
#     poetry install --no-root --without=dev && \
#     rm -rf $POETRY_CACHE_DIR

COPY . .

# # Build mypackages and install
RUN poetry build && \
    poetry install --only-root

# Delete mypackages source code
# RUN rm -rf /app/mypackages

# Stage 2: Runtime stage
FROM python:3.12-slim-bullseye AS runtime

# Create and set working directory
WORKDIR /app

# Install build dependencies
# RUN apt-get update && apt-get install -y curl build-essential && \
#     curl -sSL https://install.python-poetry.org | python3 - && \
#     apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Add Poetry to PATH
ENV PATH="/app/.venv/bin:/root/.local/bin:$PATH" \
    VIRTUAL_ENV=/app/.venv

# Copy only the necessary files to install dependencies
COPY pyproject.toml poetry.lock .

# Copy the rest of the application code
COPY --from=builder ${VIRTUAL_ENV} ${VIRTUAL_ENV}

# Run the application
ENTRYPOINT ["python", "-m", "/app/.venv/bin/mycli"]
# ENTRYPOINT ["poetry", "run"]
# CMD ["mycli"]